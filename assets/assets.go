// Code generated by go-bindata. DO NOT EDIT.
// sources:
// res/DiscordPTB.lnk (1.945kB)
// res/pinned_update.json (12.594kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _discordptbLnk = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x95\x4f\x68\x23\x55\x1c\xc7\x3f\xb1\xad\xb5\x17\x89\x18\xa4\x7f\xac\x8d\xd8\x88\x28\x33\x99\x49\xd2\x92\x06\x84\xb6\xf9\x63\x42\xa7\x26\x24\x0d\xa4\x30\x6a\x87\x64\xa0\xc1\xd4\x4c\x66\xa6\x90\x2a\x14\xc1\x43\x41\xac\x17\x2f\x22\x48\x8b\x08\x55\xd0\x83\x17\x05\x95\x52\xf0\xe0\x4d\xaa\x56\xf1\xe0\xa1\x15\x44\x11\x44\xb0\x97\x5d\xd8\x65\x97\x99\x24\x4b\xd3\x4d\xe9\x65\x2f\xbb\xec\xf7\xf1\xde\x9b\x37\xbf\xdf\xfb\x7e\xbf\xef\xbd\xe1\x8d\x02\x78\x7c\x0f\xe0\xe0\xc0\x6d\x49\xdd\x98\x05\x3f\xf0\xa0\x3a\xe6\x6d\xbe\x7a\xe4\xe9\xf4\x87\xfb\xbf\xff\x29\xfe\xff\xb3\x87\x77\x1f\x76\x13\x3d\x74\xe3\x5f\x7c\x4c\xe4\x8e\xb3\x87\xfe\x7f\x62\x55\xef\x47\xbf\x3d\xc4\x73\x92\xf4\xe1\x08\xc1\x78\x4c\xe5\x76\xbc\x8c\xec\xf6\xa5\x45\x29\xed\x25\x91\x29\xc4\xb3\xf9\x4d\x19\x52\x0c\xd1\xcf\x7f\xfb\xa5\xc5\x91\xb4\x13\x13\x81\xab\x75\x47\xec\x95\x73\x0c\xd7\xf7\xc6\x3c\x09\xaa\x58\x94\xa9\x63\x52\x21\xc7\x12\xf3\xc0\x30\x2b\x84\x70\x8c\x7e\xa5\x64\x06\xfc\x14\x8d\x8a\x66\xeb\xa2\xde\xd4\xcf\xf2\x8f\xa6\x9d\xea\xf0\x4f\xbf\xe9\xf0\xfb\xce\xf1\x4b\xf9\x41\x4f\x11\x83\x0a\x1a\x36\x3a\x22\x3a\x4d\x74\x60\x14\xc8\x02\x8f\xb7\xb7\xc1\xe9\xa7\xda\xb3\x5e\x04\x46\x80\x3e\xc7\xc7\xc2\xf7\x31\x2f\x90\xa8\x4e\x36\xd6\x75\x7f\x9c\x78\x4c\x4d\x54\xad\x72\xdd\xac\xe4\x96\xe6\xd5\xb3\xb6\x9e\xa4\x7b\x29\x7e\x04\xfc\xac\x62\x63\x63\x60\x11\x23\x48\x90\x4a\x57\x8e\x86\x81\x81\xe8\x8e\xd7\x08\xf2\x04\x22\x22\x6a\x57\xdb\x6b\x83\x54\x7a\x2d\x6b\x98\x38\xb1\x0b\x67\xb4\xb4\x04\x24\x44\xb7\x46\x08\x33\x8e\x80\x80\x81\x49\x9d\x32\x3a\x16\x16\x05\x6c\x34\x4c\x6c\xfc\x3d\x99\x3a\x6a\xc1\xb6\x5a\x11\x0b\x1d\x13\x0b\x95\x32\x26\x1a\xaf\xb3\x81\xca\x9c\xab\x97\x70\x3d\x6a\xa8\x28\xae\x86\x46\xed\x12\x87\x22\x55\x37\xe2\xeb\x83\x41\xd8\x0d\x14\x0b\xc9\x7c\x2e\x9f\x4d\x65\x94\x64\x40\x9d\x33\x8c\x84\x66\x6b\xaa\x52\x2f\x6b\xb5\xb3\x47\xa1\x19\x86\x58\x2d\xd7\x7b\x7c\xa7\xf7\x00\x02\x14\x29\x90\x24\x4f\x8e\x3c\x59\x52\x64\x50\x48\x12\xb8\x03\xfb\x7c\x1f\x77\x0f\x56\x5a\xd7\xd2\x6e\xa9\x3d\x36\x56\x6b\xb6\x24\xcb\x91\x4e\xfc\xd9\x9f\x7e\x6c\x9c\x7e\xf6\xa9\xf2\xe5\x5f\xc7\x5b\x95\xcd\x7a\xf1\x83\xad\x83\x97\xbe\xfb\xf5\xef\x47\xbe\x7e\xeb\xca\x72\x63\xf2\xb5\xbe\xcb\xe2\x2f\x78\x60\x08\x76\xb7\x01\xb9\x90\x2b\xfc\xf1\x76\x29\xf5\xad\x12\x8d\x7f\x73\xed\xd1\xf7\x9e\x7e\x7f\xed\x87\x06\xd0\xef\x08\x4d\x00\x41\xa0\x80\x80\x8c\xc0\x14\x02\x21\xf7\x29\x4c\x18\x89\x69\xc2\x44\x91\x09\x11\x21\x84\x40\x04\xc9\x2d\x51\x37\x12\x61\xda\xcd\x95\x89\x10\x25\x44\x14\x89\x90\x5b\x66\xdc\xb7\x4e\xa6\x7c\x6b\xd1\xeb\x6d\x33\xc5\x67\x94\x9d\x8d\x9d\x99\x85\x4f\x0e\x4f\x8e\x84\x93\x5f\x4e\x97\x81\x81\x8e\x99\xa7\xa0\x7d\x8b\x8a\x58\x34\x58\xa7\x8a\x89\x89\x4e\x0d\xf1\x82\x7b\xac\xf7\xaf\xa7\x85\x99\xb6\xe8\x17\x8f\xad\x25\x3e\xdf\x36\xd2\x7b\xe9\x59\xf1\xe3\xe7\x9b\xef\x8c\x03\xab\x4e\x42\xda\x39\x8a\x37\x16\xd2\xad\xf4\xdc\xc4\xf9\xa3\xba\x19\x00\x00\xff\xff\x09\xc9\x9e\x04\x99\x07\x00\x00")

func discordptbLnkBytes() ([]byte, error) {
	return bindataRead(
		_discordptbLnk,
		"DiscordPTB.lnk",
	)
}

func discordptbLnk() (*asset, error) {
	bytes, err := discordptbLnkBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "DiscordPTB.lnk", size: 1945, mode: os.FileMode(0666), modTime: time.Unix(1540371719, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1, 0x33, 0x71, 0xa5, 0xf9, 0xda, 0xd5, 0x2b, 0x18, 0xa6, 0xdf, 0x20, 0xdc, 0xbb, 0x36, 0x60, 0xca, 0x5b, 0xe0, 0x90, 0xba, 0x5d, 0x8a, 0xc0, 0x8f, 0x55, 0x91, 0xa6, 0xc9, 0xd5, 0xf3, 0xdb}}
	return a, nil
}

var _pinned_updateJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x9a\xd1\x6e\x5c\x39\x8e\x86\xef\xf3\x14\x46\x5d\xef\xa6\x48\x8a\x14\xa9\xbc\xca\xa0\x11\x90\x14\xd5\x31\xe2\xc4\x5e\x97\xd3\xbb\x83\x41\xbf\xfb\xa2\x1c\xa7\xba\x6c\x74\x32\x0d\xa3\x0f\xe2\xf1\x9d\x75\x04\xeb\x94\xbe\xfa\xea\x3f\xd2\xa1\xfe\xf5\xe6\xe2\x62\xf7\xe9\x7a\x7e\xb9\xaa\xc3\xee\xdd\xc5\xb1\x79\x71\xb1\x9b\x97\x87\xbc\xbe\x9d\xef\x0f\xf5\xf1\xf6\xf2\xee\x74\xfd\xe2\x62\xb7\xbe\x5c\x5d\x9d\xb5\x2f\x2e\x76\x1f\xae\x0f\x77\xef\x7f\xab\xdb\xc3\xe5\xf5\xe7\xdd\xbb\x8b\x7f\x9c\x7a\x2e\x2e\xf0\xbf\xce\x1a\x70\xde\x40\x00\x3b\x35\x7f\xf9\xa3\xe7\xe1\xa3\x9c\x8d\x77\x36\xc6\xee\xc6\xf3\xa3\xff\x5a\xef\x0f\x1f\x9c\xa4\xef\xde\x5d\xec\x08\x18\x87\xe5\x68\xe5\x95\x43\x1a\x8d\x28\x33\x56\xe3\x28\x5a\x73\xe1\x58\xd5\x07\xcf\x65\x19\x03\x80\x9b\xb9\xcc\x91\xec\x2e\x15\x18\x73\x77\x36\xfa\x97\xdb\xe3\xcc\x76\x1f\xee\xee\x6e\x0e\xef\xf6\xfb\x79\xf5\xdf\x37\x77\xf1\xf6\x01\x85\xdf\xdc\xbc\xfd\x5c\x77\xfb\x79\x79\xb8\xbb\xbd\xde\xfb\xcd\xcd\xfe\xe6\x2e\xf6\xff\x7b\xf9\x79\xff\x7f\xd6\xf7\xf8\x16\xde\x1e\xe7\xb4\x7f\x4c\x6e\x8f\xfb\x23\xb0\xb7\x5f\xff\x6b\xf7\x70\xaf\xdf\xbf\xdd\x74\x37\xeb\xea\xce\x0f\x8f\xa8\xfd\xeb\x8c\xd2\x8f\xd8\x3e\xa1\xfb\x84\xef\x3d\x61\x3d\xbb\xf0\xcb\x79\xef\x0f\x29\xff\x29\xe7\xae\x46\xcc\xa1\xad\xb2\xf3\xd0\x39\x4b\x71\xf6\xee\xad\x04\x7a\x0f\x10\x10\x4e\x5d\x9e\x5d\xfb\xcc\x40\x60\x43\xa9\x85\x36\xad\xa6\xc0\xda\x3d\x1a\x7f\x23\xd2\xb7\xd7\x9f\xbe\x75\xeb\x1e\x77\xa7\x3b\xfe\xfe\xf0\xd7\x2f\x6f\xce\xe8\x9f\x1c\xff\x72\x77\x79\x75\x78\xc1\x8a\xcf\xe8\x32\x26\x75\x19\x8d\x9b\x19\x46\xc3\xbe\xa6\xa3\xb1\x9b\x15\x4a\x09\x72\xa8\xae\xc9\x43\xaa\x79\xae\x25\xad\xb0\x26\x28\x4d\x06\xe0\xcd\x14\xbf\x07\xf7\x6a\x0c\x6f\x35\xd7\x42\x6a\x9d\x55\xa1\x86\xc9\x54\x93\x04\xc9\x56\x8c\xd6\xad\x89\xe8\xc8\xe6\xae\xab\x8d\x45\x11\x8b\x86\x59\x8c\x2a\xd3\x18\x88\x1b\x1a\x7e\x02\xfd\x3c\xc1\x7f\xbb\xbe\xcc\xfa\xa9\x82\x8f\x1f\x0a\xbe\x7a\x2c\x0f\xb1\xf2\xac\xe8\xb5\xb0\x31\x52\xef\x88\x8b\xb0\x66\x0f\x02\xf0\x72\x59\x3c\x7d\x35\x28\x2a\x1f\xcd\x00\x19\x8b\x02\x62\xe9\x66\x82\xdf\x83\xdb\x8f\x9f\x29\xb8\xfd\x75\xc1\xed\xdf\x08\x2e\x6c\xe6\x82\xe2\xb3\xd0\xb3\xe1\x14\x15\x1d\xa0\xb9\x32\x46\xd1\xa0\xae\x28\x32\x07\x32\x26\x76\x21\xf1\x36\x5b\x07\x84\x32\x23\x52\xd9\x50\xf0\x13\xe8\x33\xc1\x6d\x6f\x7f\x59\xf0\xcb\x5f\x2f\xaf\xfc\xf3\xdd\xcf\x95\xfc\xc7\x29\x5e\x00\x0c\x34\x66\xf8\x18\x8e\x20\xac\x51\x3e\x61\xad\x86\x3d\x5a\x23\x1a\x45\x61\x6d\x39\x72\xc0\x52\x56\x40\x66\x68\x13\x02\xb0\x0b\x6f\x28\xf9\x37\x78\xaf\x26\xc9\xef\xf3\xa3\x00\xa2\x86\x76\xcc\x88\xe1\x42\xb1\xa2\x61\x0e\xb4\x56\x65\xe2\x99\xe2\x81\x49\x4a\x20\x2b\x01\x00\x58\xbb\xf7\x85\xc9\xbc\xa5\xe8\xe7\xb0\x9f\x97\xe6\x1f\xae\xaf\x3f\xbe\x64\xcf\x9d\x50\x03\xfa\x70\x73\x80\xd1\xb4\x21\x91\x1a\x6a\x2f\x73\x2e\x1d\x16\x5d\x87\x49\x85\x66\x40\x64\x2f\x04\x9f\xab\x05\x0c\x99\x09\xdb\x79\x7e\xe4\xf6\x6a\x14\x17\xd1\x86\xab\x80\x1a\xcb\x9c\x80\x0a\x9e\xab\xa5\x5b\xf4\xa2\x39\xfa\x6a\xe4\x81\x56\xb4\x84\xc8\x7b\x36\x6b\x34\xab\x48\xb1\x18\x2a\xb6\x5c\x8e\x7f\xe3\xfc\x3c\xbb\x6f\x6f\xf2\x05\xcb\x4d\xcc\xa9\x2d\xd9\x87\xa3\xc8\xd2\xf4\xbe\xa8\x9b\xf3\xe4\xb1\x16\xc3\x34\x58\x63\xf5\xa6\xa2\x6c\x49\xca\x2b\x50\x43\x49\x6d\x85\xc7\xaa\xcd\xe4\xbe\xbd\xc9\x57\xe3\xb6\x82\xab\x78\x12\x48\xf4\xc9\xc3\x63\x36\xe0\xca\xa1\x60\x0d\x12\xe7\xe4\x49\xba\x74\xb1\x80\x78\x2b\x72\x1d\x53\x82\xd8\x96\x36\x4d\xaa\x0d\xdd\x7e\xc0\xfc\x3c\xb5\xe7\xe5\xe1\xc6\xef\xf2\xc3\x0b\xf6\xdb\x54\x2b\x93\xb0\xfa\x4c\x1f\xea\xd1\x3d\xc7\xa0\x9e\x33\x00\x55\x15\xc8\xc2\xc9\xe1\xa8\x7b\x09\xf5\x70\x9b\xd2\xd2\x55\xa4\x2f\x29\xda\xcc\xef\x6f\xec\x5e\x8d\xe4\xb3\xa5\xa3\x46\x8e\xd1\x1b\x4e\xd0\xa9\x43\x65\xc8\x60\xa5\x49\x14\x3e\x90\x98\x7a\x12\x75\x48\xee\x05\x5d\x46\x42\x36\x71\xe1\x69\x73\x6e\x19\xe0\xe7\xac\x9f\x67\x7a\xdd\x5e\x1d\x67\xfc\x82\x45\x77\xd5\xcc\x92\xb6\x4c\x80\x7a\x0f\x20\x88\xe6\x1a\xab\x97\xce\x86\x8a\x0b\xb5\xca\x01\xe6\xc0\xd5\xda\x50\x51\x02\xee\xea\x2d\x78\x10\x6e\xb7\x4a\x79\x40\xf7\x6a\x3c\x87\xd5\x97\x06\xd3\x18\x1d\xb8\xbb\x0d\x6a\x73\xa4\x92\x87\x14\x03\x12\x54\xaa\x90\xb5\x54\x26\x9b\x6e\x26\xcd\x6a\x64\x64\x2d\xe4\x35\xb7\xdc\x74\x9e\xa1\x7e\x9e\xe6\x9f\x6a\x5e\xfa\x0b\x96\xdc\x18\x32\xdd\x7c\xad\x10\x1a\x01\xd8\x46\x22\x42\xd3\xde\xdd\x09\x67\x1e\x53\x1c\x81\xd3\x67\xac\x21\x3c\x3a\x4f\x4e\xeb\x85\xad\xe3\xb0\xed\xd2\xfc\x1e\xdc\xab\x51\x3c\x5b\xcb\x11\x6b\xd8\x82\x76\x7c\x70\x2e\x53\xe8\x3e\x2a\x18\xdd\x65\xe1\xe2\x76\x5c\xc4\x24\x0d\xec\x42\xbd\xcd\x11\x83\x91\x84\xba\x8d\xde\xc7\x96\xdb\xcd\x13\xe8\xe7\x09\x7e\xb8\xa9\xab\xab\xfc\x50\x2f\x3a\xca\xa7\xcd\xd6\x98\x4a\x43\x27\x9b\x1f\x53\x9d\x35\x08\x63\x98\x1c\xad\x36\x0c\xcf\x22\x88\x68\xa0\x8c\xde\xa5\x25\x8f\xca\x48\x0d\x35\xee\xdb\x55\x80\x4e\xf4\x5e\x8d\xea\xa1\x5e\xcb\x8e\x89\x52\x75\x0c\x11\xd1\x69\x44\x21\xd1\xb4\x45\x99\x60\x6b\x23\x19\xd2\x0d\xb9\x89\x3a\x48\x9f\xad\xb8\xd1\xea\x9a\x36\xc6\x96\x55\xa0\x47\xb4\x9f\xe7\xfb\xf5\x6f\x75\x7b\xe5\xff\xa4\x17\x6c\x3b\xa7\xce\x45\x89\x49\x54\x2a\xac\x86\xa3\xa8\x0f\x9b\xde\xa1\xb0\xb4\x0f\x1d\xcc\x09\xb2\x32\x22\x5b\xb9\xa1\xb4\x80\x1a\x08\x16\xae\xdb\x65\xfa\x37\x76\xaf\xc6\xf5\xc9\x4b\x90\xd9\x01\xba\xe0\x92\x65\x31\xb5\x1d\xe3\xc5\xcb\x0b\x6d\xac\xa1\x04\x41\xbd\x50\x45\xc7\x88\x02\x62\xab\x31\x21\x1d\xc5\xda\x96\x2b\xf4\x73\xd6\xcf\x33\xfd\xe3\xed\xe5\xe1\xe6\x05\x6b\x0e\x4b\x71\x1d\xbf\x80\x84\xa9\xeb\xbe\x64\xd1\x7a\xf6\x36\x44\x96\x2e\x28\xc2\x0c\x28\xb7\xea\xcb\xcc\xba\x75\x03\xf4\x79\xdc\x20\x61\x2b\x18\xdb\xad\xcf\xef\xc1\xbd\x1a\xc7\x97\x36\x65\x9b\xe0\x8c\x14\xd9\xa6\x77\xd7\x28\x15\x47\x57\x6d\x01\xc8\xd8\xe7\x88\xc2\x69\x2a\xa6\x1c\x5a\x25\xab\xd0\xb4\xba\x06\xc0\x86\x8e\x9f\x40\x3f\x4f\xf0\xbc\xba\xfe\x32\x0f\xff\xfc\xfc\x92\xdf\x26\x32\x08\x61\x83\x31\xb9\xad\x91\xe5\x4b\x27\x3a\x0d\x2e\x14\x9d\x9d\x12\xc4\x2c\xaa\x5b\x58\x05\x44\x4e\x17\xeb\x4c\xd0\x01\x7a\x8d\xbe\xa1\xe4\x27\x78\xaf\x47\x74\xec\xc6\x6b\xb9\x37\xed\xaa\x90\xb8\x4c\x1a\xa5\x0f\x27\x44\x9f\xce\x10\x4a\x73\x40\x28\xab\x8f\xee\xec\xd3\xc2\x3a\x39\x38\xd1\x94\x2d\xc3\xfc\x11\xec\x67\x6e\x44\x9f\x1c\xdf\x7a\x79\xaa\xe7\x2c\xb7\xb5\x94\x67\x73\xaf\xd9\xe7\x94\x31\xa7\xe4\x1a\xc5\x2d\x16\x33\x99\x04\x86\x05\x72\xca\xac\x61\x13\x74\x0d\xc4\x58\x38\x17\x44\xdb\x6e\x2b\xfa\x15\xdd\xab\x11\xbd\x0d\x6a\x66\x1a\xbd\x63\xf8\xaa\x36\x6d\x95\x52\x26\x20\x29\xcc\x30\xe2\x5a\x21\x8b\xd2\x52\x74\xce\xe3\x73\x75\x71\x70\x70\x8e\x5c\x42\x6d\xcb\xcd\xe8\x1f\xa8\x9f\xa7\xf9\xaf\xfe\xa9\x5e\xfc\x69\x2d\x94\x8a\x42\x4d\x5a\x81\xda\x8d\xb3\x11\x30\xa1\x4e\xe0\x3e\x59\x81\xb9\xf7\x56\x5e\x73\xc9\xb4\xbe\xac\x0d\x4a\x0e\x63\x96\x41\x3a\x3b\x6e\x66\xfa\x1f\xf4\x5e\x8d\xec\x4c\xe4\xd2\xab\xf5\xbe\x98\x5a\xf6\x48\x4d\x35\xc0\x35\x46\xd9\x6c\x73\xcc\xa6\xad\x67\x32\xa7\x49\x89\x87\x41\xa6\x27\xa2\x56\x2b\x41\xdb\x50\xf6\xc7\xb4\x9f\x59\x30\xaa\xc3\xc7\xbb\xeb\x9b\xf7\x79\x7d\xfb\x73\x4f\xb6\xb4\x1f\x17\x45\x45\xbd\x2b\xbb\xb4\x01\xa2\xe8\xee\x8b\x30\x3b\x01\x1b\x20\xb6\x95\xd0\xd1\xbc\x84\x3b\x8d\x29\x11\x5c\x3c\xb4\x8d\x4e\x65\x6e\xcd\x72\xbb\xa2\xd1\x19\xbf\x7d\xfb\x0f\x39\xc5\x45\xff\xc6\x79\x77\xf3\x1e\x47\xcc\x19\xa2\x90\x03\x47\xb3\x1a\x3e\x43\x65\x41\x1f\x68\xcd\x8f\x39\x1f\x84\xc1\x73\xa2\x3b\xaf\x55\x01\xc6\x46\xaa\x91\x5b\x16\x8e\x9e\xf0\x7e\x74\x98\x8b\xbe\x6b\xfd\x9b\x87\xef\xe1\xb1\xd7\xdf\x23\x7e\x62\x7d\xa2\x7c\xe2\xfb\x40\xf6\xcf\x9e\x8a\xdc\x79\x25\x43\xd4\x98\x3e\x45\x8e\x2b\xbb\xc1\x96\x5c\x45\x24\xca\x49\xf7\xb5\x7b\x1a\xd4\x50\x58\xc8\x1d\x8b\x13\x63\xca\x1c\x8e\xeb\x1b\xb4\xbf\x07\xd7\x13\x0f\xbf\xce\xfd\x89\x7f\xa7\xdf\xfa\x77\xbd\x3b\x73\xee\xcc\xb7\xb3\x7c\x3d\x79\xf6\x67\x3c\x74\x11\x36\xb7\x11\x06\xd0\x38\x61\x2d\x1f\xd9\xfa\xf2\x85\x54\xdc\x0c\xba\x19\x43\x6f\x48\xce\xab\x83\x54\xe3\xe5\x05\x25\xa8\x3a\xce\x4a\xec\x7f\x13\x91\xf3\x7c\xdc\x9d\xac\xb8\x9f\xc1\xee\xb6\xfe\xe7\xcb\xe5\x6d\x9d\xaf\x72\xff\xf1\x83\x9c\xfc\x4e\x29\xf2\xfb\x6f\xb6\x9f\xf4\x7c\x5d\x5f\x3c\xb9\xf8\xf5\x04\xed\xf1\x23\xbd\xf9\xfd\xcd\xff\x07\x00\x00\xff\xff\xc5\x85\xea\x42\x32\x31\x00\x00")

func pinned_updateJsonBytes() ([]byte, error) {
	return bindataRead(
		_pinned_updateJson,
		"pinned_update.json",
	)
}

func pinned_updateJson() (*asset, error) {
	bytes, err := pinned_updateJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pinned_update.json", size: 12594, mode: os.FileMode(0666), modTime: time.Unix(1630876203, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5b, 0x91, 0x97, 0x1e, 0x9f, 0x9e, 0xbf, 0xe8, 0x9, 0xa2, 0x24, 0x2f, 0x22, 0x81, 0x33, 0x3d, 0xfb, 0x39, 0x18, 0x42, 0x76, 0x5d, 0xe9, 0xd4, 0x5a, 0x32, 0xa6, 0x1b, 0xfc, 0x11, 0x94, 0xb9}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"DiscordPTB.lnk":     discordptbLnk,
	"pinned_update.json": pinned_updateJson,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"DiscordPTB.lnk": {discordptbLnk, map[string]*bintree{}},
	"pinned_update.json": {pinned_updateJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
