// Code generated by go-bindata. DO NOT EDIT.
// sources:
// res/DiscordPTB.lnk (1.945kB)
// res/pinned_update.json (12.594kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _discordptbLnk = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x95\x4f\x68\x23\x55\x1c\xc7\x3f\xb1\xad\xb5\x17\x89\x18\xa4\x7f\xac\x8d\xd8\x88\x28\x33\x99\x49\xd2\x92\x06\x84\xb6\xf9\x63\x42\xa7\x26\x24\x0d\xa4\x30\x6a\x87\x64\xa0\xc1\xd4\x4c\x66\xa6\x90\x2a\x14\xc1\x43\x41\xac\x17\x2f\x22\x48\x8b\x08\x55\xd0\x83\x17\x05\x95\x52\xf0\xe0\x4d\xaa\x56\xf1\xe0\xa1\x15\x44\x11\x44\xb0\x97\x5d\xd8\x65\x97\x99\x24\x4b\xd3\x4d\xe9\x65\x2f\xbb\xec\xf7\xf1\xde\x9b\x37\xbf\xdf\xfb\x7e\xbf\xef\xbd\xe1\x8d\x02\x78\x7c\x0f\xe0\xe0\xc0\x6d\x49\xdd\x98\x05\x3f\xf0\xa0\x3a\xe6\x6d\xbe\x7a\xe4\xe9\xf4\x87\xfb\xbf\xff\x29\xfe\xff\xb3\x87\x77\x1f\x76\x13\x3d\x74\xe3\x5f\x7c\x4c\xe4\x8e\xb3\x87\xfe\x7f\x62\x55\xef\x47\xbf\x3d\xc4\x73\x92\xf4\xe1\x08\xc1\x78\x4c\xe5\x76\xbc\x8c\xec\xf6\xa5\x45\x29\xed\x25\x91\x29\xc4\xb3\xf9\x4d\x19\x52\x0c\xd1\xcf\x7f\xfb\xa5\xc5\x91\xb4\x13\x13\x81\xab\x75\x47\xec\x95\x73\x0c\xd7\xf7\xc6\x3c\x09\xaa\x58\x94\xa9\x63\x52\x21\xc7\x12\xf3\xc0\x30\x2b\x84\x70\x8c\x7e\xa5\x64\x06\xfc\x14\x8d\x8a\x66\xeb\xa2\xde\xd4\xcf\xf2\x8f\xa6\x9d\xea\xf0\x4f\xbf\xe9\xf0\xfb\xce\xf1\x4b\xf9\x41\x4f\x11\x83\x0a\x1a\x36\x3a\x22\x3a\x4d\x74\x60\x14\xc8\x02\x8f\xb7\xb7\xc1\xe9\xa7\xda\xb3\x5e\x04\x46\x80\x3e\xc7\xc7\xc2\xf7\x31\x2f\x90\xa8\x4e\x36\xd6\x75\x7f\x9c\x78\x4c\x4d\x54\xad\x72\xdd\xac\xe4\x96\xe6\xd5\xb3\xb6\x9e\xa4\x7b\x29\x7e\x04\xfc\xac\x62\x63\x63\x60\x11\x23\x48\x90\x4a\x57\x8e\x86\x81\x81\xe8\x8e\xd7\x08\xf2\x04\x22\x22\x6a\x57\xdb\x6b\x83\x54\x7a\x2d\x6b\x98\x38\xb1\x0b\x67\xb4\xb4\x04\x24\x44\xb7\x46\x08\x33\x8e\x80\x80\x81\x49\x9d\x32\x3a\x16\x16\x05\x6c\x34\x4c\x6c\xfc\x3d\x99\x3a\x6a\xc1\xb6\x5a\x11\x0b\x1d\x13\x0b\x95\x32\x26\x1a\xaf\xb3\x81\xca\x9c\xab\x97\x70\x3d\x6a\xa8\x28\xae\x86\x46\xed\x12\x87\x22\x55\x37\xe2\xeb\x83\x41\xd8\x0d\x14\x0b\xc9\x7c\x2e\x9f\x4d\x65\x94\x64\x40\x9d\x33\x8c\x84\x66\x6b\xaa\x52\x2f\x6b\xb5\xb3\x47\xa1\x19\x86\x58\x2d\xd7\x7b\x7c\xa7\xf7\x00\x02\x14\x29\x90\x24\x4f\x8e\x3c\x59\x52\x64\x50\x48\x12\xb8\x03\xfb\x7c\x1f\x77\x0f\x56\x5a\xd7\xd2\x6e\xa9\x3d\x36\x56\x6b\xb6\x24\xcb\x91\x4e\xfc\xd9\x9f\x7e\x6c\x9c\x7e\xf6\xa9\xf2\xe5\x5f\xc7\x5b\x95\xcd\x7a\xf1\x83\xad\x83\x97\xbe\xfb\xf5\xef\x47\xbe\x7e\xeb\xca\x72\x63\xf2\xb5\xbe\xcb\xe2\x2f\x78\x60\x08\x76\xb7\x01\xb9\x90\x2b\xfc\xf1\x76\x29\xf5\xad\x12\x8d\x7f\x73\xed\xd1\xf7\x9e\x7e\x7f\xed\x87\x06\xd0\xef\x08\x4d\x00\x41\xa0\x80\x80\x8c\xc0\x14\x02\x21\xf7\x29\x4c\x18\x89\x69\xc2\x44\x91\x09\x11\x21\x84\x40\x04\xc9\x2d\x51\x37\x12\x61\xda\xcd\x95\x89\x10\x25\x44\x14\x89\x90\x5b\x66\xdc\xb7\x4e\xa6\x7c\x6b\xd1\xeb\x6d\x33\xc5\x67\x94\x9d\x8d\x9d\x99\x85\x4f\x0e\x4f\x8e\x84\x93\x5f\x4e\x97\x81\x81\x8e\x99\xa7\xa0\x7d\x8b\x8a\x58\x34\x58\xa7\x8a\x89\x89\x4e\x0d\xf1\x82\x7b\xac\xf7\xaf\xa7\x85\x99\xb6\xe8\x17\x8f\xad\x25\x3e\xdf\x36\xd2\x7b\xe9\x59\xf1\xe3\xe7\x9b\xef\x8c\x03\xab\x4e\x42\xda\x39\x8a\x37\x16\xd2\xad\xf4\xdc\xc4\xf9\xa3\xba\x19\x00\x00\xff\xff\x09\xc9\x9e\x04\x99\x07\x00\x00")

func discordptbLnkBytes() ([]byte, error) {
	return bindataRead(
		_discordptbLnk,
		"DiscordPTB.lnk",
	)
}

func discordptbLnk() (*asset, error) {
	bytes, err := discordptbLnkBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "DiscordPTB.lnk", size: 1945, mode: os.FileMode(0666), modTime: time.Unix(1540371719, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1, 0x33, 0x71, 0xa5, 0xf9, 0xda, 0xd5, 0x2b, 0x18, 0xa6, 0xdf, 0x20, 0xdc, 0xbb, 0x36, 0x60, 0xca, 0x5b, 0xe0, 0x90, 0xba, 0x5d, 0x8a, 0xc0, 0x8f, 0x55, 0x91, 0xa6, 0xc9, 0xd5, 0xf3, 0xdb}}
	return a, nil
}

var _pinned_updateJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x9b\xdd\x6e\x5c\x39\x8e\x80\xef\xf3\x14\x86\xaf\x77\x63\x91\x12\x49\xb1\x5f\x65\x30\x68\xf0\xb7\x63\xc4\x1d\x7b\x6d\xa7\x77\x07\x83\x7e\xf7\x45\x65\x1c\xa7\x1c\x24\xd9\x85\xd1\x85\x78\x7c\x67\x59\x55\x3a\x47\xdf\xf9\x4a\x45\x8a\xaa\x7f\xbe\x39\x3b\x3b\xff\xfd\x3a\x3f\x5e\xd5\xdd\xf9\x2f\x67\x87\xe6\xd9\xd9\x79\x5e\xde\xc5\xf5\x6d\xfe\x9a\x75\xf7\xfe\xfe\xfa\xe6\xd7\xb8\xbe\xad\xc7\xde\xb3\xb3\xf3\xfe\x78\x75\x75\xd4\x3e\x3b\x3b\x7f\x77\x7d\x77\xff\xeb\x1f\x75\x7b\x77\x79\xfd\xe1\xfc\x97\xb3\xbf\x3d\xf6\x9c\x9d\xc1\x7f\x1c\x35\xc6\x71\x03\x06\xcc\xc7\xe6\xdf\xbf\xf4\x3c\xdc\xd0\xd1\x78\x78\xd4\x79\x63\xf1\xde\x7e\xab\x5f\xef\xde\x19\x12\x9f\xff\x72\x76\x4e\xda\xb3\x47\xae\x80\x96\xb9\xd9\x10\x02\xbd\xa1\x67\x44\xf5\x8e\xc5\xc3\x7c\x70\x4b\xac\x89\x44\x38\xac\x6c\x19\x4c\x1d\xca\xb9\x84\xe2\xfc\x68\xf4\x8f\xb7\x87\x99\x9d\xbf\xbb\xbf\xbf\xb9\xfb\xe5\xe2\x22\xaf\xfe\xf3\xe6\xde\xdf\x3e\x00\xb1\x9b\x9b\xb7\x1f\xea\xfe\x22\x2f\xef\xee\x6f\xaf\x2f\xec\xe6\xe6\xe2\xe6\xde\x2f\xfe\xfb\xf2\xc3\xc5\xff\x6c\xbe\x80\xb7\xe3\xed\x61\x4e\x17\xdf\xe2\x77\x81\x17\x07\x6c\x6f\xff\xf5\xde\xf3\x87\x2b\xfe\xf9\xf9\xd2\xe7\x59\x57\xf7\x76\xf7\x84\xdd\x3f\x8f\x58\xfd\x88\xf0\x57\x8c\xbf\xa2\xfc\x15\xe7\x27\xa4\xbf\xc5\xfa\xc9\x58\xdf\xa0\xed\xba\x10\x74\xea\x32\x94\x88\x1d\x2b\x0d\x65\x6f\x04\xd2\xde\xd3\x34\x77\xe5\xac\xad\xa0\x31\xc9\xd3\x28\x35\x56\x02\xa3\xb7\x66\x54\x9f\x3f\x19\xff\xa4\xbc\x6f\xaf\x7f\xff\xf2\x22\x38\x7f\xbc\xee\x9f\x0f\x7f\xfd\xfd\xcd\xd1\x33\xf8\x62\xfd\xe5\xdd\x8d\xdd\xc7\xbb\x9f\x6a\x3c\xfc\xd0\x78\x5b\x23\x24\x11\x8a\x86\x73\x30\x4d\x87\xaa\xc1\x82\x4b\x46\x8b\x71\x34\x6f\x83\x25\x56\x9e\x2a\x6a\x2a\xee\x2b\xab\x76\x32\x2f\x0c\x3f\x9d\xf1\x0f\xec\x2e\xe0\x67\xda\x8e\x7f\x9d\xed\xb4\x8c\x1b\x61\xea\x9a\x3c\xe7\x5e\xd6\x5b\xe6\x9c\xd3\x55\x0c\x15\x0d\xc6\x28\x27\xb0\xcd\x62\xc0\xa1\x01\x3a\x64\x61\x0f\xcb\x98\x4d\x7e\x4a\xdb\x8f\x58\x1f\x99\x8e\xff\x7f\xd3\x6f\x6f\xe2\x25\x4b\xfe\x89\x73\x0e\x0a\x5c\xaa\x9e\xce\x66\xc2\x6d\x39\x46\x22\x67\xaf\x42\xa9\x29\x08\x93\x3a\x92\x71\x35\x62\x80\x7b\x08\xe9\x76\xc5\x93\x49\x7e\x7b\x13\xaf\xc6\xef\xb6\xe0\xca\x15\xa8\xed\x05\xcb\xcc\xdc\x65\x16\x97\x75\xe2\x24\x98\x6e\xb6\x94\x9b\x03\xdb\x23\x00\x9a\x30\x26\xee\x8d\x63\x84\xf9\x3c\xa1\xdf\x0f\x98\x9f\xa7\xf6\xbb\xeb\xeb\xf7\x2f\xd8\x6d\x70\xdd\x16\x16\x89\xc9\x9d\x6e\x3c\x71\x00\x01\xb5\xaa\xf6\xcc\x72\x54\x74\x9c\x32\x40\x7b\x6b\xcd\xed\x32\x78\xf1\x82\x99\x25\xed\x70\x32\xb7\x0f\xdc\x5e\x8d\xdc\xda\x49\x0e\xb1\x91\xc6\x74\x98\xee\xdc\x53\x17\xb1\x17\x32\x15\x49\x94\x57\x52\x31\xaa\x8c\x76\x1e\xcd\xa5\x28\x9c\x09\x13\x79\x6b\x9c\x50\xee\xcf\x9c\x9f\x67\xf7\xdd\x4d\x5d\x5d\xc5\xbb\x8a\x97\xec\x78\xe6\x82\x2e\x4e\xe7\x31\x61\x55\xef\x2d\x4a\x1c\x1c\xe4\xba\x18\xe6\xa2\xce\x6c\x38\x44\xe4\x45\x4b\x5b\x38\x26\xc8\xc4\x10\xdc\x4b\x8a\x4f\xe6\xf8\x17\x7a\xaf\xc6\xf4\xd2\xb9\x83\x99\x48\x51\x41\xe7\xe6\xf6\xb0\x69\x02\x2b\x08\x64\x6d\x08\x6b\x33\xd5\x51\x00\xd5\x52\x2e\xae\x8b\x76\x74\x15\x67\xdb\x29\x83\xf2\xa7\xb4\x9f\xe9\x7b\xbd\xbf\xbd\xbc\x7f\xc1\xae\xbb\x81\x8c\xd8\x60\x14\xa1\xe1\x7b\x31\x66\x85\x15\xf5\x10\xdb\x9c\x98\xed\x87\x40\xd2\xa9\x71\x94\xe1\x02\x03\x9f\x94\x13\x61\xa3\xb1\x9d\xce\xf5\x4f\xe4\x5e\x8d\xe7\x43\xa5\x32\xb5\x7d\x8c\xe9\x13\x0e\xd1\x38\x88\x97\x96\x15\xbb\x97\x77\x8f\x5a\x73\x4e\x82\x72\xe4\x31\x84\x00\xa7\x6e\xc9\x65\xc3\x33\xeb\x94\x9e\x3f\x92\x7e\x9e\xe3\x5f\xef\xc2\xbc\x3c\xc9\x93\x7b\xba\xc3\xd8\x6b\xfb\xae\x96\x90\x66\x96\x82\xb5\xa8\xad\x95\x95\x78\x15\xa6\x35\x0c\xd8\x95\xdd\x50\x65\xd0\x14\x7d\x48\x9c\x46\x9d\x4c\xf2\x07\x74\xaf\xc6\xf2\x1e\xdb\x12\x08\x89\x94\x76\xe1\x0c\x6f\x08\x44\xdf\xe9\x44\x5e\x6b\xc1\x4a\x89\x86\x76\xb4\xf0\x18\xb8\x4d\x82\xcc\x97\x27\x81\xb3\x9e\xd0\xf2\x23\xd4\xcf\xd3\xfc\xe3\xfd\xe5\xd5\x4b\x96\x7c\x0c\x50\x9a\xd0\x4e\x46\x5b\x15\x6d\x89\x50\xac\xc4\xa2\x21\x7b\xed\x8c\x42\x2c\x9d\xa8\x90\xa4\xaa\x2e\xbd\x84\x85\x9d\x69\x9b\xe6\x38\x99\xe4\x9f\xc0\xbd\x1a\xc5\xb3\x61\xd4\x16\xdf\x0a\x6b\x95\x1e\x42\xf4\x1e\x5a\x9b\x6d\x25\x33\x05\xad\x09\x51\xde\x6c\xa4\x5a\x41\x68\x82\x39\xd0\xb3\xbc\x77\x1b\x9e\x50\xf1\x47\xd0\xcf\x13\xfc\x37\xfb\xbd\x5e\xbc\xe5\x5d\xac\x58\x34\x07\xc9\xda\xe3\xb0\xac\x74\x0e\x6a\x4f\x19\x38\x7a\x88\xd4\xde\x3d\xc7\x2e\xe8\x06\x1a\xae\xea\x4e\x05\xc6\xe5\x11\x38\xe6\xc9\x2c\xff\x42\xef\xd5\xa8\x3e\x3a\x09\x3d\x71\x68\x8f\xc4\x11\x4d\x16\x80\x7b\xcb\x2e\xcb\xc1\x2e\x9e\x8e\xb0\xc3\x70\xaf\xc0\xd6\x3d\x13\xa6\x27\xf5\x0c\x5b\x24\x76\x42\xd5\x9f\xd2\x7e\x9e\xef\x71\x75\xfd\x31\xef\xfe\xf1\xe1\x25\x6f\x25\xe2\xca\xb5\xc2\xa1\x25\x38\x76\xf5\x0a\x14\xdc\xc3\x76\x94\x20\xb6\x6f\xec\x70\x9e\x1b\x77\x3a\x36\xb7\x4a\x2c\xce\x30\xf6\xd4\xa4\xb9\x4e\xa6\xfb\x23\xbc\x57\x63\x7b\xed\x6e\xd9\x92\xbe\x01\xbd\xac\x10\xd8\xd2\x23\x6d\x2f\x5b\xd5\x96\x90\x19\xa6\x02\xb0\xe7\xe6\xc1\x03\x7a\x79\x25\xd1\x96\x99\x2e\xa7\xdc\x50\x7c\x02\xfb\x79\xb2\xd7\xed\xd5\x61\xca\x2f\x58\xf5\xf4\x1e\x0e\x88\xd1\x2c\x64\x16\xd9\x14\x2a\xe4\x82\xde\xe6\xde\xb5\x87\x88\x48\xb5\x43\xeb\x58\x87\x80\xb1\x9c\xc3\x36\xef\xde\x10\x72\x32\xd5\x1f\xd0\xbd\x1a\xd1\xad\x33\xdb\x75\x73\xb2\x58\x6d\x93\x81\x31\x25\x78\x2b\xc1\x30\xa1\xcc\xb5\x1d\xa6\xb4\x60\xad\xd0\x2e\x60\x83\x5e\x99\xa6\xba\x46\x9f\xb2\x32\x74\x84\xfa\x99\xb9\x68\xe5\xa5\xbd\x60\xc9\x63\xae\xa0\x11\x2d\x85\x81\x19\x65\xab\x4c\x46\x06\xca\x42\x96\xb5\x0a\xc2\xdd\x38\x21\x79\x1e\xb2\x27\xb6\x35\x37\x19\xb7\x06\x0e\xd4\x13\x66\xa2\x07\x70\xaf\x47\xf1\xd0\x41\xde\xb2\x08\x50\xca\xdb\x68\x81\xfb\x52\x50\x19\x9e\x38\x19\x63\x09\x2f\x41\xf7\xd9\x6b\xe8\xcc\xa1\x5c\x8c\x64\xaa\x9b\x79\x9d\x32\x0f\xfd\x0c\xfa\x79\x82\xff\x71\xf9\xdb\xe5\x95\x7d\xb8\xff\xb9\xc7\x5a\x7e\x2c\xf9\xdc\x11\x8c\x39\x95\x6a\x09\x6d\xe0\x45\xc8\xa3\x68\x64\xcd\x4a\x9f\xc9\x69\x1b\x5c\x9a\x67\x13\xa2\x34\xcd\xa9\xb3\x72\xc7\xf0\xcc\x7d\xba\x1a\xd1\x23\xbc\x57\x23\x7a\xd0\xa4\x1c\x43\x38\x24\x9c\xca\x17\x59\x22\x6d\xa7\x25\xb1\x71\x6d\x50\x2b\x48\xfb\xb4\xcb\xeb\x59\x6d\x96\x8b\xa6\xc4\x1c\xa8\x31\x98\x4e\x28\xfa\x13\xd8\xcf\x93\xfd\xfa\x8f\xba\xbd\xb2\x7f\xe0\x0b\x76\x9d\x6b\xc4\xea\x8e\xe9\x5b\x62\x59\xc1\xd6\x01\xb0\x48\xb3\x91\x44\x15\x2c\xa2\x19\x6c\x49\xe4\x00\x2b\xc0\xc3\x53\xf1\x64\x28\x2c\xc4\xd3\xed\x9f\x7f\x66\xf7\x6a\x54\x67\xe8\xb9\xdb\xd3\x6b\x90\xe7\xde\x4e\x6a\x15\x48\x61\x0e\xb2\xf6\xa2\x42\xaf\xe9\xbc\x2a\x4b\x52\xd0\x88\x9b\x05\x65\xd5\x0c\x9a\x7c\xca\x6c\xf4\x98\xf5\xf3\x4c\x7f\x7f\x7b\x79\x77\xf3\x82\x35\xa7\x20\x68\x29\xe2\xad\x73\x52\xcd\x89\x5c\xd1\x2b\x7c\xf2\x76\x99\x8e\x2e\x83\x08\x73\x2e\x95\x31\xaa\x10\x0f\x11\x0e\x49\x66\x1f\x02\x9d\xd3\xe5\xa1\x9f\xc0\xbd\x1a\xc7\xb7\xed\x50\x54\x1d\x8b\x08\x50\x33\x39\x47\xe5\xea\x52\xcb\xc0\xe0\x92\x30\xf0\xa6\x9e\xc4\xb4\x64\xe0\xec\x8d\xb9\x47\x30\x4b\xc5\x38\x65\x68\xfe\x08\xfa\x99\x71\xcb\xf5\x65\xfc\xdc\x98\x65\xfd\x38\x30\x2f\x60\xd8\x81\x83\xda\x3a\x2c\x7a\xf2\x6e\x52\x90\x35\x94\x68\x75\xee\x89\x65\x65\x96\x08\x5a\x51\x3c\xc8\x16\x74\xbb\x44\x62\xae\xd3\x09\xfe\x09\xdc\xc5\xfa\x37\x39\x83\x3b\xff\xaf\x45\xbc\x6c\xd3\x82\xd0\xd1\x69\xe1\xb6\x8b\xda\xcb\x5b\x9b\x01\x63\x0d\x9a\x8e\xc6\x66\x73\x38\x49\xe2\x94\xa1\x93\x45\xd5\x5c\x46\x3e\xc5\x7c\x32\xd0\x4f\x0e\xdf\xce\xef\x0a\xfe\xe6\xe1\x01\x3c\x35\xf9\x7b\xa8\x1f\x21\x3f\xe2\x7d\x04\xfb\x80\xf4\x1b\xb4\x44\x26\xd3\x46\xf5\x9c\x59\xb8\xa6\x76\x94\x4f\x98\xa0\x5d\x64\xd1\xa4\xda\xe0\x94\x8e\x12\x32\x60\xd6\xb6\x22\xe6\x51\xc6\x99\x6b\x7c\xae\x35\xfc\x35\x9c\xbe\x12\xf0\x5f\x73\xff\x4a\xbc\xc7\x4f\xf7\x77\x85\x3b\x92\xed\x48\xb4\xa3\x55\xf4\x51\xb0\x6f\x7d\x0b\xf5\x1c\xd6\xd1\x65\x00\x09\xb3\x90\x70\x6e\x25\xd3\xb1\x0d\x03\x74\x01\xe6\x32\x11\x42\xa4\xf0\xc0\x43\x82\x07\x89\x95\x34\xbc\x62\x7c\x29\x71\xfd\x45\x44\x8e\x97\xc2\xf3\x47\x2b\x3e\xcd\xe0\xfc\xb6\xfe\xeb\xe3\xe5\x6d\x1d\x97\xc7\xff\xf6\x74\x49\x7c\xf2\x23\x85\xef\x6c\xd7\x7d\xf5\xef\xa3\xe3\x53\xdf\xac\x4e\x7e\x73\xd1\x3d\xdc\xd2\x9b\x3f\xdf\xfc\x6f\x00\x00\x00\xff\xff\xaf\x7d\x09\xe5\x32\x31\x00\x00")

func pinned_updateJsonBytes() ([]byte, error) {
	return bindataRead(
		_pinned_updateJson,
		"pinned_update.json",
	)
}

func pinned_updateJson() (*asset, error) {
	bytes, err := pinned_updateJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pinned_update.json", size: 12594, mode: os.FileMode(0666), modTime: time.Unix(1646603353, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5b, 0xec, 0xfa, 0x45, 0x7f, 0x3c, 0xf1, 0x97, 0x92, 0x80, 0xfb, 0x46, 0x72, 0x46, 0x6e, 0xae, 0x87, 0xc0, 0xe, 0x82, 0x57, 0x2b, 0xc5, 0x48, 0x52, 0x79, 0x48, 0xdb, 0xce, 0x69, 0x55, 0xd2}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"DiscordPTB.lnk":     discordptbLnk,
	"pinned_update.json": pinned_updateJson,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"DiscordPTB.lnk": {discordptbLnk, map[string]*bintree{}},
	"pinned_update.json": {pinned_updateJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
