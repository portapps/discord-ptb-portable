// Code generated by go-bindata. DO NOT EDIT.
// sources:
// res/DiscordPTB.lnk (1.945kB)
// res/pinned_update.json (13.328kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _discordptbLnk = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x95\x4f\x68\x23\x55\x1c\xc7\x3f\xb1\xad\xb5\x17\x89\x18\xa4\x7f\xac\x8d\xd8\x88\x28\x33\x99\x49\xd2\x92\x06\x84\xb6\xf9\x63\x42\xa7\x26\x24\x0d\xa4\x30\x6a\x87\x64\xa0\xc1\xd4\x4c\x66\xa6\x90\x2a\x14\xc1\x43\x41\xac\x17\x2f\x22\x48\x8b\x08\x55\xd0\x83\x17\x05\x95\x52\xf0\xe0\x4d\xaa\x56\xf1\xe0\xa1\x15\x44\x11\x44\xb0\x97\x5d\xd8\x65\x97\x99\x24\x4b\xd3\x4d\xe9\x65\x2f\xbb\xec\xf7\xf1\xde\x9b\x37\xbf\xdf\xfb\x7e\xbf\xef\xbd\xe1\x8d\x02\x78\x7c\x0f\xe0\xe0\xc0\x6d\x49\xdd\x98\x05\x3f\xf0\xa0\x3a\xe6\x6d\xbe\x7a\xe4\xe9\xf4\x87\xfb\xbf\xff\x29\xfe\xff\xb3\x87\x77\x1f\x76\x13\x3d\x74\xe3\x5f\x7c\x4c\xe4\x8e\xb3\x87\xfe\x7f\x62\x55\xef\x47\xbf\x3d\xc4\x73\x92\xf4\xe1\x08\xc1\x78\x4c\xe5\x76\xbc\x8c\xec\xf6\xa5\x45\x29\xed\x25\x91\x29\xc4\xb3\xf9\x4d\x19\x52\x0c\xd1\xcf\x7f\xfb\xa5\xc5\x91\xb4\x13\x13\x81\xab\x75\x47\xec\x95\x73\x0c\xd7\xf7\xc6\x3c\x09\xaa\x58\x94\xa9\x63\x52\x21\xc7\x12\xf3\xc0\x30\x2b\x84\x70\x8c\x7e\xa5\x64\x06\xfc\x14\x8d\x8a\x66\xeb\xa2\xde\xd4\xcf\xf2\x8f\xa6\x9d\xea\xf0\x4f\xbf\xe9\xf0\xfb\xce\xf1\x4b\xf9\x41\x4f\x11\x83\x0a\x1a\x36\x3a\x22\x3a\x4d\x74\x60\x14\xc8\x02\x8f\xb7\xb7\xc1\xe9\xa7\xda\xb3\x5e\x04\x46\x80\x3e\xc7\xc7\xc2\xf7\x31\x2f\x90\xa8\x4e\x36\xd6\x75\x7f\x9c\x78\x4c\x4d\x54\xad\x72\xdd\xac\xe4\x96\xe6\xd5\xb3\xb6\x9e\xa4\x7b\x29\x7e\x04\xfc\xac\x62\x63\x63\x60\x11\x23\x48\x90\x4a\x57\x8e\x86\x81\x81\xe8\x8e\xd7\x08\xf2\x04\x22\x22\x6a\x57\xdb\x6b\x83\x54\x7a\x2d\x6b\x98\x38\xb1\x0b\x67\xb4\xb4\x04\x24\x44\xb7\x46\x08\x33\x8e\x80\x80\x81\x49\x9d\x32\x3a\x16\x16\x05\x6c\x34\x4c\x6c\xfc\x3d\x99\x3a\x6a\xc1\xb6\x5a\x11\x0b\x1d\x13\x0b\x95\x32\x26\x1a\xaf\xb3\x81\xca\x9c\xab\x97\x70\x3d\x6a\xa8\x28\xae\x86\x46\xed\x12\x87\x22\x55\x37\xe2\xeb\x83\x41\xd8\x0d\x14\x0b\xc9\x7c\x2e\x9f\x4d\x65\x94\x64\x40\x9d\x33\x8c\x84\x66\x6b\xaa\x52\x2f\x6b\xb5\xb3\x47\xa1\x19\x86\x58\x2d\xd7\x7b\x7c\xa7\xf7\x00\x02\x14\x29\x90\x24\x4f\x8e\x3c\x59\x52\x64\x50\x48\x12\xb8\x03\xfb\x7c\x1f\x77\x0f\x56\x5a\xd7\xd2\x6e\xa9\x3d\x36\x56\x6b\xb6\x24\xcb\x91\x4e\xfc\xd9\x9f\x7e\x6c\x9c\x7e\xf6\xa9\xf2\xe5\x5f\xc7\x5b\x95\xcd\x7a\xf1\x83\xad\x83\x97\xbe\xfb\xf5\xef\x47\xbe\x7e\xeb\xca\x72\x63\xf2\xb5\xbe\xcb\xe2\x2f\x78\x60\x08\x76\xb7\x01\xb9\x90\x2b\xfc\xf1\x76\x29\xf5\xad\x12\x8d\x7f\x73\xed\xd1\xf7\x9e\x7e\x7f\xed\x87\x06\xd0\xef\x08\x4d\x00\x41\xa0\x80\x80\x8c\xc0\x14\x02\x21\xf7\x29\x4c\x18\x89\x69\xc2\x44\x91\x09\x11\x21\x84\x40\x04\xc9\x2d\x51\x37\x12\x61\xda\xcd\x95\x89\x10\x25\x44\x14\x89\x90\x5b\x66\xdc\xb7\x4e\xa6\x7c\x6b\xd1\xeb\x6d\x33\xc5\x67\x94\x9d\x8d\x9d\x99\x85\x4f\x0e\x4f\x8e\x84\x93\x5f\x4e\x97\x81\x81\x8e\x99\xa7\xa0\x7d\x8b\x8a\x58\x34\x58\xa7\x8a\x89\x89\x4e\x0d\xf1\x82\x7b\xac\xf7\xaf\xa7\x85\x99\xb6\xe8\x17\x8f\xad\x25\x3e\xdf\x36\xd2\x7b\xe9\x59\xf1\xe3\xe7\x9b\xef\x8c\x03\xab\x4e\x42\xda\x39\x8a\x37\x16\xd2\xad\xf4\xdc\xc4\xf9\xa3\xba\x19\x00\x00\xff\xff\x09\xc9\x9e\x04\x99\x07\x00\x00")

func discordptbLnkBytes() ([]byte, error) {
	return bindataRead(
		_discordptbLnk,
		"DiscordPTB.lnk",
	)
}

func discordptbLnk() (*asset, error) {
	bytes, err := discordptbLnkBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "DiscordPTB.lnk", size: 1945, mode: os.FileMode(0666), modTime: time.Unix(1540371719, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1, 0x33, 0x71, 0xa5, 0xf9, 0xda, 0xd5, 0x2b, 0x18, 0xa6, 0xdf, 0x20, 0xdc, 0xbb, 0x36, 0x60, 0xca, 0x5b, 0xe0, 0x90, 0xba, 0x5d, 0x8a, 0xc0, 0x8f, 0x55, 0x91, 0xa6, 0xc9, 0xd5, 0xf3, 0xdb}}
	return a, nil
}

var _pinned_updateJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x9b\xe1\x4e\xe4\x47\x8e\xc0\xbf\xe7\x29\x50\x7f\xbe\x1b\xca\x2e\xdb\x65\xe7\x55\x56\xd1\xc8\x2e\xdb\x19\x14\x32\x70\xc0\xe4\x6e\x6f\x95\x77\x3f\xf5\x04\x98\x66\x94\xac\x4e\xec\xb6\x84\xf8\x04\xd5\x25\xea\xdf\xf5\xe3\x87\xb1\x5d\xd5\xff\xf8\xe1\xe2\xe2\xf0\xeb\x4d\x7e\xb9\xae\xfb\xc3\x8f\x17\xc7\xe1\xc5\xc5\x21\xaf\xee\xf7\xcd\x5d\x7e\xfc\xed\xe6\x6a\xd7\xf3\xcb\x17\x17\x87\xfe\x72\x7d\x7d\x32\xbe\xb8\x38\x7c\xba\xb9\x7f\xf8\xf8\x5b\xdd\xdd\x5f\xdd\x7c\x3e\xfc\x78\xf1\xb7\xe7\x99\x8b\x0b\xf8\x8f\x93\xc1\x38\x1d\xc0\x30\x7e\x1e\xfe\xf4\x6d\xe6\xf1\x9d\x9c\xac\x77\xb2\xc6\xe1\xd6\xf7\x2f\xfe\x73\x7d\xbc\xff\xe4\xc8\x72\xf8\xf1\xe2\x00\x66\xad\x54\x99\x0e\x7b\x65\xb2\x88\x93\xc0\x10\xb3\xbd\x04\xbc\x55\xd6\x80\x4d\xe4\x40\x8d\xd6\xa4\xcd\x29\xb2\x82\x0b\x0a\x6a\xad\xc3\xc9\xea\x5f\xee\x8e\x3b\x3b\x7c\x7a\x78\xb8\xbd\xff\xf1\xf2\x32\xaf\xff\xf3\xf6\x21\x3e\x3c\x92\xf0\xdb\xdb\x0f\x9f\xeb\xe1\x32\xaf\xee\x1f\xee\x6e\x2e\xfd\xf6\xf6\xf2\xf6\x21\x2e\xff\xfb\xea\xf3\xe5\xff\x08\x5d\xc2\x87\xf1\xe1\xb8\xa7\xcb\x17\xe0\x2e\xe1\xf2\xc8\xeb\xc3\x1f\x3f\x74\x78\x7c\xd4\xef\x4f\xcf\x3c\x64\x5d\x3f\xf8\xfd\x0b\x68\xff\x38\x81\xf4\xcf\xd0\x7e\x07\xf7\x3b\xbc\x5f\x01\xd3\xc9\x0b\x3f\x9d\xce\xfe\x53\xc8\x7f\x8a\x99\x67\xe7\x0e\xdb\x96\x99\xbc\xb5\x45\x44\x8d\x19\xd0\x59\x80\xaa\x59\x53\xc7\x8a\x05\xa0\xb2\x6d\x84\x37\xe5\x26\x62\x1d\x12\xb3\x69\x1c\x5e\xac\x7f\x1e\xd0\x77\x37\xbf\x3e\xcd\xd2\x25\x1c\x9e\x1f\xf8\xfb\xe3\x77\x3f\xfd\x70\x02\xff\x59\xf0\xbb\xdb\xfd\x86\xf5\x5e\x89\x54\xbe\x8d\x6b\xf0\xee\x0d\x5a\x68\xb4\x45\x9b\x5a\x11\x8c\x97\x8c\x26\xdb\x4a\x15\x8a\x9d\xd5\xdb\x6a\x83\x23\x6b\x8e\x9e\x60\x67\xd3\xfb\xee\x76\xbf\x1b\xb9\xdb\x30\x98\xcd\x48\x19\xc1\x6c\xa6\xb1\x16\x2c\x46\xb4\xb6\x55\x56\x41\x5d\x7a\x94\x1d\xdc\xcb\x36\x12\x74\x90\x4f\xc7\x28\x41\xe6\x33\xca\xfd\x88\xf9\x75\x6a\xff\x5a\x79\xe5\x6f\x58\x6e\xb7\x24\x01\xdf\xb1\x11\xc9\x49\xdd\x4a\xaa\x50\xcd\x42\xa6\x8f\x6a\xaa\x92\x99\x58\xb8\x3b\xe6\x20\x9f\x68\xdc\x8a\xb1\x22\x21\xc6\xf9\x62\xf7\x57\x70\xef\x47\xef\xf4\x9d\x32\x57\x0e\x28\x30\x4a\x18\x33\x5c\x21\xc6\x54\x21\xf2\x18\x56\x13\x7d\xe1\xe2\x98\x65\xbb\x6c\x43\x0b\x25\x6e\xb6\x4c\x0a\x3c\xa3\xde\xcf\xa0\x5f\x27\x78\xdd\x5d\x1f\xb7\xfb\x86\x15\x07\xce\xa5\x9d\x83\xc8\x71\x0d\x2f\x29\x94\x4e\x30\x36\x54\x1f\xb9\x2c\x08\xb7\x8c\xd8\x7b\x4a\xda\xec\xcc\xbd\x46\xdb\x6c\xd6\x69\x3d\xfd\x6c\x8a\x3f\xa2\x7b\x37\x92\xa7\x44\x25\x24\x48\xcd\xdc\x86\xb9\x2b\x4d\x51\x54\x45\x00\xe7\x8a\x82\x60\x31\xb4\xa4\x4e\x2e\x36\xa4\xe2\x39\xa6\x51\x2c\xe4\x94\x75\x46\xc9\x4f\x50\xbf\x4e\xf3\x9b\xdf\xea\xee\xda\xff\x8e\x6f\xd8\x73\xe4\xd2\x63\x98\xb6\x44\xea\x58\xd6\xc9\x13\x57\xe6\xe0\xde\xe1\x1b\x87\x14\x97\x0d\x17\xdc\x90\x49\x09\x7b\xaf\x20\x1a\x6a\x7b\x95\xac\x71\x36\xcf\x9f\xd8\xbd\x1b\xd1\x15\x22\x67\x4e\x51\x62\xee\x5a\x9e\x58\x2e\xbe\x34\x75\x66\x94\x8e\x39\x25\x22\xb0\xa8\x40\x34\xba\x78\xb3\xc1\x76\x21\x1b\x64\xbb\xe8\x8c\xa2\x9f\xb2\x7e\x9d\xe9\xff\x7b\xff\x90\x6f\xd8\x72\xda\x89\x73\xe8\xf2\xd0\xb2\xbd\xc6\x88\xb1\x63\x04\x86\x8a\x0d\x46\xda\x31\xcd\xd5\x54\xcb\x24\x51\x98\x25\x9d\xab\x70\x5a\xb1\xf1\x19\x13\x96\x23\xb7\x77\x63\xb8\x8f\x81\xb9\xb6\xeb\xd6\xc4\xee\x5c\xdb\x1c\xd0\x66\x76\x8c\xae\xe9\x8c\x79\x2c\x3e\xbb\x26\x1f\xe3\x7d\x2b\x41\xd6\x06\x45\x4b\x4d\x63\x3b\xa3\xe1\x4f\x9c\x5f\x67\xf7\xbe\xbe\xf9\x92\xf7\x7f\xff\xfc\xa6\x0b\xce\x60\x5e\xba\x34\x26\x90\xa9\xa4\x8c\x5a\x48\x54\x14\x93\x6d\x48\xae\xdc\x43\xd0\xac\x68\x9b\xa0\x24\xe5\x9a\x30\x9b\xb0\x66\x4b\x50\x9d\x4d\xf1\x67\x78\xef\xc6\xf3\x39\x96\xc2\xee\x1a\xc8\x33\x33\x87\xae\x98\xd0\x33\x7a\x4b\xaa\x82\x4e\x66\x0f\x6a\xd9\xec\xb4\x73\x51\x62\x30\xf4\x9c\xc3\x15\x7b\xb2\x9e\xd1\xf3\x17\xb0\x5f\x27\xfb\xcf\xfe\x6b\x7d\xfc\xf2\x70\x75\x7d\xff\x86\x6d\x9f\xd3\xc2\x65\x2d\xdc\xbb\x45\x76\x8d\xa1\xee\x08\x2a\xa3\x62\x55\xec\x5e\x34\x6d\x0d\xca\x76\xe5\x25\x25\x3a\x41\xcd\x06\x58\x84\x75\xd2\xd9\x6c\xff\x46\xef\xdd\xe8\x9e\x43\x95\x9b\x25\x62\x50\x86\x64\xec\xc5\xcd\x95\x40\xa2\x68\x30\xba\x43\xa8\x26\xa5\x93\x4e\xc2\xf2\x6e\x68\x04\x99\xb5\xc7\x32\x3c\x67\x19\xfa\x92\xf6\xeb\x7c\xcf\xba\xff\xe5\xe1\xe6\xf6\xe3\xbe\xb9\x7b\xcb\xfd\xf2\x14\xc9\xf0\xcd\x32\xd2\x60\xb5\x2d\x5c\xb5\x07\xcd\xea\xa9\x24\xda\x93\x1c\x79\xfb\xdc\xdd\xd4\xae\xc1\x31\x63\x32\xf2\x98\xc5\xab\x2c\xce\x66\xfc\x29\xbf\x77\xe3\x3c\x2b\x9b\x14\x21\x08\x94\x50\x90\x0c\x11\x1b\xd0\x63\x60\x93\x10\x30\xe0\x56\x0d\x6f\x9c\x14\x01\x93\xc7\xc2\x45\x7b\x4d\xc4\x85\x94\xe7\x4c\xd6\xbf\xe7\xfd\x3a\xeb\xef\x6f\xeb\xfa\x7a\x7f\xaa\x37\xdd\x84\xc1\xe1\x23\xa9\x92\xd8\x68\xe6\x6e\xe1\x9a\x3e\x7c\x54\xe0\x34\x63\x16\xea\x63\x50\x2a\x0d\x47\x56\x59\x68\x34\xda\x59\x8f\xb9\x67\x5b\x9f\x2f\x6d\xff\x46\xef\xdd\x18\xef\x61\x93\x76\x42\xbb\x1c\x33\x45\xa8\xa4\x19\x43\xa4\x92\x87\x72\x07\xac\x8d\x9e\xbe\x83\xd6\xe8\xb4\xe9\x9a\x89\x4b\x30\xc5\xa5\x75\x9e\xd3\xf8\x97\xb4\x5f\xe7\xfb\x5b\x4f\x68\x96\x20\xb2\x57\x80\x03\x6d\xac\x2d\x36\x61\x00\x81\x2f\x98\xd1\x1c\x3e\xbb\x55\xad\x53\x2c\x46\xa8\x10\x74\x0a\x16\x0b\x2e\x9e\x52\x7d\x36\xd5\xdf\x57\x2e\xb3\x2d\x1d\x65\x51\x6e\x01\x57\x8e\x59\x58\x58\xce\x15\xb2\xff\xa8\x56\x77\xd2\xc2\x58\x20\x33\xe6\xe0\x08\x51\xf2\xcd\xc3\x32\x61\x67\x9e\xd1\xf2\x7f\x35\x8d\xb9\xba\xbf\xf5\x87\xfd\xe9\x0d\x3b\xee\x32\xd6\x34\x1c\xc7\xa2\x29\xb5\x77\x5b\xd2\x1a\x30\x7b\x04\xc8\x82\x21\xce\xcb\x64\xd2\x06\x90\x99\x43\x66\xbb\x28\xc8\xde\xa8\x4a\x0d\xe7\x0b\xe7\x4f\xec\xde\x8d\xe6\x53\xe6\x9a\x9a\x22\x5c\x52\x12\xec\x39\x36\xac\x6c\x64\xe1\x98\xd3\x06\xa5\x54\x0d\x66\x4a\x03\x86\x5e\x60\x34\x09\x01\x33\x5d\x4d\xcf\x79\xea\x7f\xca\xfa\x75\xa6\x7f\xba\xb9\x79\xcb\x49\x8b\x52\x42\x38\xea\x9c\x42\xc5\x2d\xea\xd1\x1d\x0e\x1b\xb3\xf0\xf8\x85\x7d\x9a\x2d\xae\x96\xed\xbe\x6c\x19\x26\x94\xad\x18\x83\x81\xe2\x7c\xa5\xe9\x91\xdb\xbb\x31\x7c\x27\xc5\xd0\x34\x98\x4a\x3e\x76\x8d\xd5\x03\xa6\x60\x47\x27\xab\x79\xb2\x6d\x1a\x4c\xc6\x11\x8e\x23\x33\xc8\x4a\x03\x3d\xda\xa7\x8e\x73\x1a\xfe\xc4\xf9\x95\x67\xff\xdf\x5d\xe8\x7a\x7b\x82\x2f\xd9\x29\xe8\x4b\xb6\x2b\xc9\x1a\x94\xb8\xa7\x82\x41\xaa\xb7\x0a\xf2\xc8\x1a\xd5\x15\xd2\xb9\x71\x1f\xff\xa1\x0a\xd2\x9c\x40\x31\x45\xfd\x7c\x9d\xc6\x47\x74\xef\xc6\x71\xc4\xee\xd5\x33\x01\x18\xdd\x20\x8f\xc5\x8f\xce\x1c\xbe\x13\x62\x78\xcc\xde\xb2\xa3\x64\x68\x48\x44\xaa\xc6\xee\x35\x6d\x68\xad\x1e\x31\xce\xd9\x4f\x3f\x41\xfd\x3a\xcd\x7f\xb9\xbb\xba\xbf\x7d\xc3\x92\x23\x80\xc6\xb1\x98\x1c\x0a\x3d\xc5\x72\xed\xb1\xa7\x4e\x85\x0a\xc2\x94\xdd\x38\x6b\x8c\x5d\x6b\x28\x62\x47\xb4\xa2\x8d\x55\x86\x04\xc5\xb9\xcf\x26\xf9\x57\x70\xef\x47\xf1\x11\x9c\xc9\xc9\xcd\x30\xdb\x69\x02\xc8\x32\xde\x51\xd3\xe6\x9a\x68\xb8\x68\x69\xb4\x2b\x95\x01\x6c\xef\xda\xbe\x26\xae\x96\x52\x18\x75\x46\xc5\x9f\x41\xbf\x4e\xf0\xdf\xae\x7e\xbe\xba\xf6\xcf\x0f\x6f\xb9\xa7\x48\xae\x8c\x36\x26\x8a\xb3\x74\x43\x81\xc5\xe0\xd1\x84\x06\xcd\xb1\x6d\x5a\xa2\x6a\xce\x99\xde\x9b\x37\x23\x00\x43\x45\x5a\x4f\x25\xd2\xf3\xdd\xc1\x7d\x82\xf7\x6e\x44\x87\xb1\x86\x89\xfa\xf0\x45\xd1\x12\x94\x90\x38\xd7\xde\x8b\xbc\x72\x39\x5a\x59\x97\xda\x9c\xa1\x63\x85\x9a\x89\xc3\xa4\xd5\xb9\xd3\xab\xcf\x79\x55\xf1\x05\xec\x57\x76\x13\xeb\x97\xbb\xab\x87\x37\x6c\xba\x53\xb6\x34\x8b\xa4\x3a\xee\x9a\x23\x66\x09\x2d\x5d\xba\xcb\xd7\xac\x5c\x6b\x91\xc1\x6e\x85\x68\xdb\x4d\xc0\x98\x72\x4c\x25\x23\x04\x5b\xce\xd7\x49\xfc\x4a\xee\xdd\x68\xee\xd6\xfe\x47\xed\xce\x65\xcd\xab\x69\x09\x27\xc7\x46\xe7\x8e\x81\x03\x65\xb2\xa9\xd8\x1e\xe8\x61\x86\x3b\x4b\x84\xc4\x9b\x53\x3a\xce\xd9\x5f\xf9\x46\xfa\xff\xe9\xf8\x0f\x8f\xbf\x81\x97\x2e\xff\x15\xeb\x67\x32\xcf\x7c\x9f\xdd\x7d\x64\xfa\x67\x75\xba\xc5\x66\x12\xcd\x65\xc4\x34\x0d\x62\x90\x4d\xd4\x41\xbe\x76\x3a\x6c\x18\x8d\x98\x11\x02\x12\x36\x16\x68\xec\xb0\xde\xa3\xa4\x4b\xf7\x53\x00\xfe\xf7\x80\xfa\xce\xc0\x3f\xf6\xfe\x9d\x79\xcf\x7f\xdf\x7f\x69\xdc\x89\x21\x27\xa6\x9d\x58\xf6\x6c\xd8\x9f\x1d\x72\x35\x8e\xb1\xd6\xc4\x36\xd0\x31\x72\xb7\x27\xee\xa5\xe1\x04\x3e\x63\x2b\x0b\x91\xaf\xa0\xdc\x0b\xa2\x7c\x20\xb2\xbb\xc2\x6a\x06\x2b\xf9\x76\xd4\xf8\x6f\x22\x72\x6a\xca\xe1\xd9\x8a\xaf\x3b\x38\xdc\xd5\x7f\x7d\xb9\xba\xab\xd3\x8a\xed\x6f\x2f\xa3\xe2\x8b\x93\xc5\xef\x22\xe6\xd3\x0d\xd8\xbf\x3e\x96\xf9\xd3\x06\xf6\xf7\x49\xc6\xd7\x0f\xf9\x1c\xdf\xd2\x0f\xbf\xff\xf0\x7f\x01\x00\x00\xff\xff\x64\xc7\xbd\xd1\x10\x34\x00\x00")

func pinned_updateJsonBytes() ([]byte, error) {
	return bindataRead(
		_pinned_updateJson,
		"pinned_update.json",
	)
}

func pinned_updateJson() (*asset, error) {
	bytes, err := pinned_updateJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pinned_update.json", size: 13328, mode: os.FileMode(0666), modTime: time.Unix(1722711403, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6f, 0xc1, 0x2d, 0x53, 0xa3, 0x79, 0xe6, 0x56, 0x5a, 0xb, 0x12, 0xcc, 0x63, 0x50, 0x33, 0xc4, 0x14, 0x4a, 0x15, 0xe7, 0xf7, 0x4b, 0xa, 0x10, 0xf6, 0xfa, 0x7, 0xdb, 0x6a, 0x46, 0x6d, 0xf6}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"DiscordPTB.lnk":     discordptbLnk,
	"pinned_update.json": pinned_updateJson,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"DiscordPTB.lnk": {discordptbLnk, map[string]*bintree{}},
	"pinned_update.json": {pinned_updateJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = os.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
