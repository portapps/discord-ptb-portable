// Code generated by go-bindata. DO NOT EDIT.
// sources:
// res/DiscordPTB.lnk (1.945kB)
// res/pinned_update.json (12.594kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _discordptbLnk = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x95\x4f\x68\x23\x55\x1c\xc7\x3f\xb1\xad\xb5\x17\x89\x18\xa4\x7f\xac\x8d\xd8\x88\x28\x33\x99\x49\xd2\x92\x06\x84\xb6\xf9\x63\x42\xa7\x26\x24\x0d\xa4\x30\x6a\x87\x64\xa0\xc1\xd4\x4c\x66\xa6\x90\x2a\x14\xc1\x43\x41\xac\x17\x2f\x22\x48\x8b\x08\x55\xd0\x83\x17\x05\x95\x52\xf0\xe0\x4d\xaa\x56\xf1\xe0\xa1\x15\x44\x11\x44\xb0\x97\x5d\xd8\x65\x97\x99\x24\x4b\xd3\x4d\xe9\x65\x2f\xbb\xec\xf7\xf1\xde\x9b\x37\xbf\xdf\xfb\x7e\xbf\xef\xbd\xe1\x8d\x02\x78\x7c\x0f\xe0\xe0\xc0\x6d\x49\xdd\x98\x05\x3f\xf0\xa0\x3a\xe6\x6d\xbe\x7a\xe4\xe9\xf4\x87\xfb\xbf\xff\x29\xfe\xff\xb3\x87\x77\x1f\x76\x13\x3d\x74\xe3\x5f\x7c\x4c\xe4\x8e\xb3\x87\xfe\x7f\x62\x55\xef\x47\xbf\x3d\xc4\x73\x92\xf4\xe1\x08\xc1\x78\x4c\xe5\x76\xbc\x8c\xec\xf6\xa5\x45\x29\xed\x25\x91\x29\xc4\xb3\xf9\x4d\x19\x52\x0c\xd1\xcf\x7f\xfb\xa5\xc5\x91\xb4\x13\x13\x81\xab\x75\x47\xec\x95\x73\x0c\xd7\xf7\xc6\x3c\x09\xaa\x58\x94\xa9\x63\x52\x21\xc7\x12\xf3\xc0\x30\x2b\x84\x70\x8c\x7e\xa5\x64\x06\xfc\x14\x8d\x8a\x66\xeb\xa2\xde\xd4\xcf\xf2\x8f\xa6\x9d\xea\xf0\x4f\xbf\xe9\xf0\xfb\xce\xf1\x4b\xf9\x41\x4f\x11\x83\x0a\x1a\x36\x3a\x22\x3a\x4d\x74\x60\x14\xc8\x02\x8f\xb7\xb7\xc1\xe9\xa7\xda\xb3\x5e\x04\x46\x80\x3e\xc7\xc7\xc2\xf7\x31\x2f\x90\xa8\x4e\x36\xd6\x75\x7f\x9c\x78\x4c\x4d\x54\xad\x72\xdd\xac\xe4\x96\xe6\xd5\xb3\xb6\x9e\xa4\x7b\x29\x7e\x04\xfc\xac\x62\x63\x63\x60\x11\x23\x48\x90\x4a\x57\x8e\x86\x81\x81\xe8\x8e\xd7\x08\xf2\x04\x22\x22\x6a\x57\xdb\x6b\x83\x54\x7a\x2d\x6b\x98\x38\xb1\x0b\x67\xb4\xb4\x04\x24\x44\xb7\x46\x08\x33\x8e\x80\x80\x81\x49\x9d\x32\x3a\x16\x16\x05\x6c\x34\x4c\x6c\xfc\x3d\x99\x3a\x6a\xc1\xb6\x5a\x11\x0b\x1d\x13\x0b\x95\x32\x26\x1a\xaf\xb3\x81\xca\x9c\xab\x97\x70\x3d\x6a\xa8\x28\xae\x86\x46\xed\x12\x87\x22\x55\x37\xe2\xeb\x83\x41\xd8\x0d\x14\x0b\xc9\x7c\x2e\x9f\x4d\x65\x94\x64\x40\x9d\x33\x8c\x84\x66\x6b\xaa\x52\x2f\x6b\xb5\xb3\x47\xa1\x19\x86\x58\x2d\xd7\x7b\x7c\xa7\xf7\x00\x02\x14\x29\x90\x24\x4f\x8e\x3c\x59\x52\x64\x50\x48\x12\xb8\x03\xfb\x7c\x1f\x77\x0f\x56\x5a\xd7\xd2\x6e\xa9\x3d\x36\x56\x6b\xb6\x24\xcb\x91\x4e\xfc\xd9\x9f\x7e\x6c\x9c\x7e\xf6\xa9\xf2\xe5\x5f\xc7\x5b\x95\xcd\x7a\xf1\x83\xad\x83\x97\xbe\xfb\xf5\xef\x47\xbe\x7e\xeb\xca\x72\x63\xf2\xb5\xbe\xcb\xe2\x2f\x78\x60\x08\x76\xb7\x01\xb9\x90\x2b\xfc\xf1\x76\x29\xf5\xad\x12\x8d\x7f\x73\xed\xd1\xf7\x9e\x7e\x7f\xed\x87\x06\xd0\xef\x08\x4d\x00\x41\xa0\x80\x80\x8c\xc0\x14\x02\x21\xf7\x29\x4c\x18\x89\x69\xc2\x44\x91\x09\x11\x21\x84\x40\x04\xc9\x2d\x51\x37\x12\x61\xda\xcd\x95\x89\x10\x25\x44\x14\x89\x90\x5b\x66\xdc\xb7\x4e\xa6\x7c\x6b\xd1\xeb\x6d\x33\xc5\x67\x94\x9d\x8d\x9d\x99\x85\x4f\x0e\x4f\x8e\x84\x93\x5f\x4e\x97\x81\x81\x8e\x99\xa7\xa0\x7d\x8b\x8a\x58\x34\x58\xa7\x8a\x89\x89\x4e\x0d\xf1\x82\x7b\xac\xf7\xaf\xa7\x85\x99\xb6\xe8\x17\x8f\xad\x25\x3e\xdf\x36\xd2\x7b\xe9\x59\xf1\xe3\xe7\x9b\xef\x8c\x03\xab\x4e\x42\xda\x39\x8a\x37\x16\xd2\xad\xf4\xdc\xc4\xf9\xa3\xba\x19\x00\x00\xff\xff\x09\xc9\x9e\x04\x99\x07\x00\x00")

func discordptbLnkBytes() ([]byte, error) {
	return bindataRead(
		_discordptbLnk,
		"DiscordPTB.lnk",
	)
}

func discordptbLnk() (*asset, error) {
	bytes, err := discordptbLnkBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "DiscordPTB.lnk", size: 1945, mode: os.FileMode(0666), modTime: time.Unix(1540371719, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1, 0x33, 0x71, 0xa5, 0xf9, 0xda, 0xd5, 0x2b, 0x18, 0xa6, 0xdf, 0x20, 0xdc, 0xbb, 0x36, 0x60, 0xca, 0x5b, 0xe0, 0x90, 0xba, 0x5d, 0x8a, 0xc0, 0x8f, 0x55, 0x91, 0xa6, 0xc9, 0xd5, 0xf3, 0xdb}}
	return a, nil
}

var _pinned_updateJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x9a\xdd\x4e\x5d\xc9\x72\xc7\xef\xfd\x14\x88\xeb\xc4\x54\xd7\x67\xd7\xbc\xca\xd1\xc8\xaa\xae\xaa\x1e\x23\x33\x86\x00\x9e\xe4\xe8\x68\xde\x3d\xda\x73\x30\xde\x58\xb6\x93\x43\x66\x6b\x08\x77\x34\xbd\x58\x6b\xf7\x8f\xdf\xfe\xaf\xea\x8f\x7f\xbc\x39\x3b\x3b\xff\xf5\xba\x3e\x5d\xf5\xdd\xf9\x4f\x67\x87\xe6\xd9\xd9\x79\x5d\xde\xe5\xf5\x6d\xbd\xab\xcb\xbb\x9b\xb8\xcf\xf7\x8f\x3d\x67\x67\xe7\xfb\xd3\xd5\xd5\x51\xfb\xec\xec\xfc\xfd\xf5\xdd\xfd\xbb\xdf\xfa\xf6\xee\xf2\xfa\xe3\xf9\x4f\x67\x7f\x7b\xec\x39\x3b\x1b\xff\x76\xd4\x80\xe3\xc6\x80\x01\x8f\xcd\x9f\xbf\xf4\x3c\x7c\x98\xa3\xfb\x1d\xdd\xe3\xfc\x26\xf2\x43\xfc\xd2\xef\xee\xde\x07\x8a\x9e\xff\x74\x76\xae\x83\x43\xd8\xcd\x50\x3b\x93\xc6\x2a\x42\x0b\x58\x6a\x5b\xc3\x87\xf8\xa8\x25\x68\xa3\x99\x3c\xa3\x10\x68\x83\xeb\xf4\x1c\xc0\xcc\x6e\xe7\x47\x77\xff\x74\x7b\x18\xd9\xf9\xfb\xfb\xfb\x9b\xbb\x9f\x2e\x2e\xea\xea\xdf\x6f\xee\xd7\xdb\x07\x18\x71\x73\xf3\xf6\x63\xdf\x5f\xd4\xe5\xdd\xfd\xed\xf5\x45\xdc\xdc\x5c\xdc\xdc\xaf\x8b\xff\xbc\xfc\x78\xf1\x5f\x53\x2f\xc6\x5b\x78\x7b\x18\xd3\xc5\xd7\xec\x2e\xc6\xc5\x01\xd9\xdb\x7f\xfe\xdd\xf9\xc3\xd3\x7e\xff\xfc\xd8\xf3\xea\xab\xfb\xb8\x7b\xc2\xed\x1f\x47\x9c\x7e\x44\xf7\x2b\xbe\x5f\x11\x3e\x30\x06\x3f\xfa\xc5\xcf\xc7\xbd\x3f\xe4\xfc\x4d\xd2\x30\x17\xcf\x45\x51\xa5\x93\x3c\xb8\x90\xd1\x32\x7b\x06\x2d\x94\x96\x81\x33\x32\x85\xbc\x98\x70\x2b\xce\xd9\x32\x61\x86\xe8\xd8\xda\xc0\xe7\x4f\xee\x7f\x32\xd6\xb7\xd7\xbf\x3e\x5c\x00\x7e\x31\xce\x1f\x9f\xf9\xfb\xc3\x4f\x3f\xbf\x39\xe2\xff\x68\xfa\x6f\x97\xbf\x5c\x5e\xc5\xc7\xfb\x7e\xc1\xaa\xd3\x8e\x89\xd9\xbe\xc1\x60\xcd\x6d\x5b\x86\x2d\xd9\x9c\xa0\x93\x9d\x64\x17\xd0\x82\x08\x6c\x83\x92\x16\x84\xa0\xdc\x16\x65\x04\x0c\x73\x9d\x4c\xf5\x47\x78\xaf\xc6\x75\x1e\xbb\x41\x96\x2f\x5c\xb8\x78\xb4\x17\xcc\x25\x39\xe4\xd0\xa1\x9b\x61\x20\xa7\xc5\x2e\x69\x34\x2d\x05\x8a\x91\x8c\xd0\xab\x31\x3d\x4e\xe9\xfa\x13\xd8\xcf\x93\xfd\xfd\xf5\xf5\x87\x17\xec\x79\x3b\xe1\x36\xaa\x0d\x2e\x06\x02\xa5\x9c\xc2\xe8\x63\x0b\xed\x0a\x6d\xf1\xa8\xc1\x32\xa6\x4c\xc7\xa8\x50\x1a\xdb\x77\x4f\x72\x5f\x1a\x7a\x32\xcf\x0f\xdc\x5e\x8d\xe2\xc0\x1a\xc8\x30\xc7\x9e\xe1\x45\x5a\x1a\xa1\xb3\xa6\x0a\x85\xed\x94\x4c\x92\x16\xa2\x31\x71\xaa\xa1\xc1\xdc\x34\xc6\x1c\xb8\x2d\x38\xd9\x4e\xa8\xf8\x67\xce\xcf\xb3\xbb\xfa\xee\xc3\xfd\xf5\xcd\xbb\xbc\xbe\x7d\xc9\x69\xde\x95\x73\x2a\xa1\x26\x29\x87\x6e\x33\x87\x65\x63\xe6\x40\x1c\xc1\xb2\x32\xc4\xc9\x3a\xe6\x2e\xda\xa8\xbe\x4b\x75\xfb\x18\xba\x86\x2c\xea\xd3\x15\x2e\x47\xfc\x5e\x8d\xed\x64\x2a\xd6\x5b\xc3\x74\x4b\x4c\x01\xc0\x5c\xed\x0b\xf7\x2a\xb2\x9d\x44\x38\x27\xeb\xce\x05\x8b\xcb\xb8\x77\x19\xac\x43\xac\x4f\xe5\x6e\x3f\x65\xf1\xf2\x15\xef\xe7\x59\xff\xe1\xf6\xf2\xee\xe6\x05\xeb\xbe\xd9\x5b\xf7\x2c\xae\x15\x1b\xc4\x6a\xb5\x73\xc9\x02\xd0\xdc\xb5\xe7\xf2\x18\x43\x87\x62\xb8\x23\xe0\x44\xe4\x8d\xe6\x38\xdc\x64\x08\xc9\xc9\x74\xff\x03\xdc\xab\xf1\x5c\x9d\xd9\xb6\xa3\x84\x08\x42\xe6\xee\xc9\x86\x3c\xb6\x24\xeb\x70\xc5\xca\xb1\x75\xcc\xd8\x8e\x9a\x3c\x12\x54\x12\x8c\xd7\x14\x0f\x5b\xa7\xf4\xfc\x11\xf4\xf3\x04\xff\x7a\x92\xfa\xf2\x14\x3f\x60\xdc\xce\xd0\x9c\x3c\x3d\xf7\xdc\x1a\x63\x6d\x5b\x3b\x77\x67\xf5\x66\xe9\xbd\x0e\xd7\x40\x9b\x0c\x28\xa5\x4a\x97\x92\x25\x49\xb3\x4f\x97\xe8\x0f\xe8\x5e\x8d\xe4\x0c\x30\x0b\x02\x60\x6a\x90\x46\xa9\x4b\x4e\x12\x1c\x26\x48\x6c\x21\x2b\xa6\x21\xab\x8c\x4e\x8d\x6e\xe2\x71\xb8\x0e\x1b\x71\x43\x38\x9c\x50\xf2\x23\xd4\xcf\xd3\xfc\x97\xf8\xb5\xdf\x7d\xba\xbf\xbc\x7a\xc9\xa6\x23\x59\xb3\x1c\xca\xc5\x72\xdb\x92\x01\x73\x3a\x0d\x92\xec\x6e\xe4\x0c\x6e\x0e\xef\xc1\x3c\x7b\xb3\xb5\x98\xe0\x10\x41\x92\xc6\x5a\x35\x4e\x66\xfa\x17\x7a\xaf\x46\x76\xed\xb5\x18\x94\xe0\x60\x76\xe0\x14\x23\x73\x5e\xd2\xbe\x38\xb8\x98\x77\xab\x3b\x18\x34\xf2\xb2\x31\x72\x1e\x66\x4c\x0b\xb0\xe7\x5c\xeb\xc9\x6c\xe8\xb4\xb4\x9f\x19\xeb\x5d\x97\xf1\x82\x55\x1f\xbe\xc7\xc0\x0e\xa0\x12\x22\x03\xf3\x24\x37\xc9\x5a\xae\xb2\x02\xb3\xa9\x95\xa7\xf5\x58\x42\x49\x58\x52\x26\x12\xd4\xd1\x14\x2b\xfc\x74\xa1\x7e\x00\xf7\x6a\x2c\x2f\x16\x1e\x14\x01\x64\x13\x3a\x67\x2f\x9c\xd0\xb3\x6a\x8b\xae\xe4\x94\x6a\x8b\x49\x39\xc4\x1b\x47\x07\x0d\x30\x27\x4c\x49\x51\x6d\xa3\x53\x46\xfa\x67\xd0\xcf\x13\xfc\xf6\x26\x5f\xb0\xde\xd6\x43\xf7\x66\xde\xfe\x87\xca\x4b\x64\x4c\xdb\x1b\xe7\xd2\xe9\xe5\x89\xdb\x48\x47\xb6\xa8\xb2\x4e\x45\xac\xce\xc6\x1c\x36\x37\xac\x94\xd3\xad\xb5\xdc\xde\xe4\xab\x91\x3b\x1a\x16\xe6\x5a\x65\xd6\x6e\xb0\x9d\x60\x67\xb3\x94\xc1\xb4\x22\x85\x2e\x17\xde\xc4\x43\x38\x40\xd5\x70\x00\x81\x0a\x68\x43\x84\xcf\x13\xca\xfd\x80\xf9\x79\x6a\xdf\xdd\xf4\xd5\x55\xbe\xef\xfc\x6b\x57\x13\xf1\x87\x86\x47\x6d\xd8\xe0\x9d\x56\x7b\x4a\x0f\x3e\xcc\x81\x98\x3c\xd9\x9a\x8a\x38\xad\xca\xb6\x1f\x4a\x73\x50\x11\x9e\x6b\xd7\xa1\x4c\x77\x21\x1f\x89\xa7\x5b\x35\xff\x42\xef\x02\xff\x42\xd1\x8f\x28\xff\x9f\x45\x17\x5f\x5e\x30\x75\x4c\x56\xaa\x31\x01\x0a\x63\x2a\x96\xa4\x2b\xac\xd8\x0a\x51\x66\x40\x3b\x49\xd7\x80\xca\x3d\x17\x19\x2f\xc2\x5d\xb2\x4e\x99\xe2\x4f\x69\x7f\xf1\x7d\xc0\xbf\xe0\x7b\x7f\xb8\xbd\xbc\x7f\xc1\x69\x4e\xa3\x29\x86\x58\x08\xad\x9c\x1c\x49\x2a\x4e\x21\x23\xb1\x69\x34\xe8\x1a\x36\x84\x7d\x8c\x29\x93\x39\x0a\xd1\x46\x74\xed\x59\xa3\x72\xcc\xd3\xb9\xfe\x07\xb9\x57\x13\xe8\x4a\x89\xd5\x44\xab\xc3\x3d\x4a\x8a\x45\x20\x70\x8d\x89\x08\x14\xd3\x56\xa6\x69\x0e\xda\x7b\x74\xed\x1c\x93\x69\x74\xb8\xf2\xf0\xe1\xb3\x4f\xe9\xf9\x23\xe9\xe7\x65\xfa\xf5\x6f\x7d\x7b\x15\x7f\xc7\x17\x6c\xb9\xe5\x0a\x47\x4f\x52\x02\xed\x24\xdb\xdb\x58\x6a\x35\x58\xef\x32\x1e\x10\xbd\x38\x7b\xed\x95\x5a\x53\xe6\xe8\x43\xf5\x3e\x52\x02\xb7\x9f\x70\x1f\xf4\x33\xbb\x57\xe3\xf9\x9e\x6b\xb7\xed\x26\x5f\xb2\xd2\x5a\xe6\x5c\x9b\x49\x52\x00\x67\xd1\x42\x90\xc4\x35\x56\x76\xb6\x96\xb9\xce\x5c\xbd\x65\x6a\xc3\xdc\x80\x72\x42\xcf\x8f\x59\x3f\x73\xcb\xff\xfa\x32\xff\xda\x0d\x22\xf9\xa1\xe6\x33\x16\x96\x5a\x93\xbb\x98\x2d\x5c\x1d\xb9\xc0\x5d\x74\xd3\x34\x6c\x47\xb6\xb2\x21\x30\x63\xf9\xe8\x86\x01\x0b\x8a\x36\x04\xcd\x45\x23\x4f\xb7\xdd\x7f\x00\x77\x21\xff\x4f\x6a\x16\xfe\x9f\xf6\x41\x41\xa7\x48\x14\x2e\x51\x67\x73\xa7\xce\x6c\x25\x70\x09\xaa\xd8\x66\x4d\x0c\x64\xba\xa1\xa6\xe2\x60\xe3\x5c\x1b\xa9\xc4\x51\x17\x9d\xb2\x66\x79\x04\xfd\xa4\x5c\xe1\xff\xad\xe0\x7d\x7b\x75\x18\xee\x0b\x4e\x72\xdc\x8d\xde\x20\x8a\x0b\xd5\x84\x48\x3d\x98\x74\x22\xe4\x64\x0a\x96\x1a\x9a\xe1\x02\x9a\xe0\x0e\x98\x51\x09\xd3\x95\x68\xc4\xf4\x75\xba\xc3\x5b\x0f\xe8\x5e\x4d\x90\x9b\x2d\x07\x68\x46\x18\xc6\x90\x66\x73\x00\x29\xed\xb9\x5a\x53\x17\x6e\x00\x2c\x0b\xad\x98\x18\x92\xb2\x27\xf9\xf0\xc4\x68\x4e\x9f\x1b\x4f\x28\xf9\x11\xea\xe7\xe5\x78\x5e\x5d\x7f\xaa\xbb\xbf\x7f\x7c\xc9\xcb\x2c\xad\x86\x53\x6b\x98\x0f\x42\x46\x37\xa7\xb9\x01\x58\xc2\x42\xf7\xa4\x05\xb5\x60\x8e\x85\xc5\x31\x61\xfb\x96\x15\x5e\x13\x60\x64\x4f\xd8\x70\x32\xd1\x1f\xe1\xbd\x1a\xd5\x87\x8d\x0d\x46\x8d\xaa\x6b\xd1\xc0\xe5\xcc\x01\x53\x56\x43\x50\xcb\x62\x2d\x97\xc0\x55\xa8\x63\xb5\x98\x59\x5a\x71\x81\xc1\x4e\x13\x3f\xe5\xd1\xad\x27\xb0\x9f\x27\xfb\x4b\xdf\x19\x12\x28\xc0\xb6\x5d\xb8\x74\x87\xee\xf4\xea\x43\xb4\xb0\xac\xc8\xa0\xb1\xdc\x22\x0d\x20\x27\xb0\x2d\x8a\xa0\xc5\x51\xad\x6b\x32\x46\xda\xe9\xd6\x13\x5f\xd7\xa6\x10\xa9\x0a\x27\xaa\xad\xe1\xeb\xf0\xfa\x94\x55\x85\x2c\x86\xbc\x5b\x83\x26\x8b\x06\x21\x04\xcc\x64\x49\x29\x1f\xba\x58\xa3\xa2\x0c\x2d\xf7\x09\x25\xff\x57\xf7\x83\xde\x3c\xfc\x03\x9e\x9a\xfc\x3d\xd4\x8f\x60\x1e\xf1\x3e\x9a\xfb\x80\xf4\x1b\xb4\x5c\x60\x23\x33\x6d\xd2\xaa\x9d\xb8\xa9\x6c\xaa\xa5\x2d\xed\x01\x32\x7a\xd0\xf4\x88\xd1\x5b\xbc\xa6\x23\x4a\xee\xb1\x1b\x3a\x57\x64\xf5\x67\x5a\x7f\x0e\xa7\xaf\x04\xfc\xe7\xd8\xbf\x12\xef\xf1\xdb\xfd\x5d\xe1\x8e\x04\x39\x12\xed\x48\xb2\x47\xc1\xbe\x55\x76\xcd\xc2\x39\xd9\x9b\xa8\x46\xd1\x80\x9d\x3a\x87\x03\x2c\x17\x89\xa5\x64\x60\xa5\x6a\x0d\x1d\x7b\x49\xb2\x30\x0e\xb0\xb1\x59\xa3\x71\x7d\x79\x1b\xfd\x49\x44\x8e\x4d\x39\x7f\xb4\xe2\x8f\x11\x9c\xdf\xf6\x7f\x7c\xba\xbc\xed\xe3\xf3\x1f\x7f\x7b\x1a\x89\x4f\xce\xfb\x7d\xa7\x04\xfe\xfe\xc2\xf5\x37\xf3\xf5\x9b\x33\xc5\xc3\x47\x7a\xf3\xfb\x9b\xff\x0e\x00\x00\xff\xff\xd2\x8c\xb4\x0f\x32\x31\x00\x00")

func pinned_updateJsonBytes() ([]byte, error) {
	return bindataRead(
		_pinned_updateJson,
		"pinned_update.json",
	)
}

func pinned_updateJson() (*asset, error) {
	bytes, err := pinned_updateJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pinned_update.json", size: 12594, mode: os.FileMode(0666), modTime: time.Unix(1635286332, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x92, 0xb4, 0x1a, 0x5a, 0xcf, 0x8, 0x70, 0xb, 0xf5, 0x1f, 0xa, 0x2b, 0x1e, 0x98, 0xd4, 0xbf, 0xc1, 0xec, 0x96, 0x17, 0xb0, 0x0, 0x95, 0x26, 0x69, 0xda, 0x17, 0xff, 0x5b, 0x37, 0x67, 0xa4}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"DiscordPTB.lnk":     discordptbLnk,
	"pinned_update.json": pinned_updateJson,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"DiscordPTB.lnk": {discordptbLnk, map[string]*bintree{}},
	"pinned_update.json": {pinned_updateJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
